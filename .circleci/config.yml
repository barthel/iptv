version: 2.1
orbs:
  python: circleci/python@3.1.0
  node: circleci/node@7.1.0
  jq: circleci/jq@3.0.2

commands:
  setup:
    steps:
      - checkout
      - run:
          name: delete and create dist directory
          command: |
            rm -rf dist tmp
            mkdir -p dist tmp
      - jq/install

workflows:
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
          context:
            - "github"
      - check:
          requires:
            - build
          context:
            - "github"
      - filter:
          requires:
            - check
          context:
            - "github"
      - deploy:
          requires:
            - filter
          context:
            - "github"
          filters:
            branches:
              only: main

jobs:
  build:
    executor: python/default
    resource_class: small
    steps:
      - setup
      - run:
          name: enhance TDT Channels list
          command: |
            ./map_tdt_channels_list.sh
      - run:
          name: generate M3U list
          command: |
            ./generate_m3u8.sh
      - run:
          name: copy M3U list to tmp/
          command: |
            cp *.m3u* tmp/
      - run:
          name: ls -al tmp/
          command: |
            ls -al tmp/
      - persist_to_workspace:
          root: tmp
          paths: 
            - .

  check:
    executor: python/default
    steps:
      - setup
      - run:
          name: install ffmpeg
          command: |
            sudo apt update
            sudo apt install ffmpeg
      - run:
          name: clone IPTVChecker repository
          command: |
            git clone https://github.com/NewsGuyTor/IPTVChecker.git
      - run:
          name: install IPTVChecker
          command: |
            pip install -r IPTVChecker/requirements.txt
      - run:
          name: patch/fix IPTVChecker
          command: |
            sed -i 's/^\( *min_data_threshold = 1024\).*/\1 \* 0.8/' IPTVChecker/IPTV_checker.py
            sed -i 's/^\( *\)capture_frame(/\1# capture_frame(/' IPTVChecker/IPTV_checker.py
            cat IPTVChecker/IPTV_checker.py
      - attach_workspace:
          at: tmp
      - run:
          name: check M3U list with IPTVChecker
          no_output_timeout: 1h
          command: |
            pushd tmp/
            for file in *.m3u*; do
                if [ -e "${file}" ]; then
                    echo "Verarbeite Datei: ${file}"
                    time python ../IPTVChecker/IPTV_checker.py "${file}" -split
                fi
            done
            popd
      - run:
          name: ls -al tmp/
          command: |
            ls -al tmp/
      - run:
          name: rename and copy working M3U lists to dist
          command: |
            pushd tmp/
            find . -type f -name "*_working.m3u*" | while read _file; do
              _newfile=$(echo "${_file}" | sed 's/_working//')
              echo "copy: ${_file} to: ../dist/${_newfile}"
              cp -f "${_file}" "../dist/${_newfile}"
            done
            popd
      - run:
          name: ls -al dist/
          command: |
            ls -al dist/
      - persist_to_workspace:
          root: dist
          paths: 
            - .

  filter:
    executor: python/default
    resource_class: small
    steps:
      - setup
      - attach_workspace:
          at: dist
      - run:
          name: ls -al dist/
          command: |
            ls -al dist/
      - run:
          name: filter M3U list
          command: |
            pushd dist/
            time python ../filter_white_whitelist_m3u8.py
            popd
          environment:
            WHITELIST_DIR: ..
      - run:
          name: ls -al dist/
          command: |
            ls -al dist/
      - persist_to_workspace:
          root: dist
          paths: 
            - .

  deploy:
    executor: node/default
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: install gh-pages
          command: |
            npm install --silent gh-pages
      - run:
          name: setup git environments
          command: |
            git config user.email "circle-ci@users.noreply.github.com"
            git config user.name "circle-ci"
      - add_ssh_keys:
          fingerprints:
            - "05:c0:0c:2f:f7:ac:a6:db:53:a6:04:8f:64:3a:c0:84"
      - run:
          name: ls -al dist/
          command: |
            ls -al dist/
      - run:
          name: deploy to gh-pages branch
          command: |
            NODE_DEBUG=gh-pages npx gh-pages \
            --message "[skip ci] Updated by ${CIRCLE_BUILD_URL}" \
            -d dist
          environment:
            CACHE_DIR: /tmp
